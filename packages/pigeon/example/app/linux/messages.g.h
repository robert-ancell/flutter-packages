// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v18.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_

#include <flutter_linux/flutter_linux.h>

G_BEGIN_DECLS

typedef enum {
  PIGEON_EXAMPLE_PACKAGE_CODE_ONE = 0,
  PIGEON_EXAMPLE_PACKAGE_CODE_TWO = 1
} PigeonExamplePackageCode;

G_DECLARE_FINAL_TYPE(PigeonExamplePackageMessageData,
                     pigeon_example_package_message_data,
                     PIGEON_EXAMPLE_PACKAGE, MESSAGE_DATA, GObject)

PigeonExamplePackageMessageData* pigeon_example_package_message_data_new(
    const gchar* name, const gchar* description, PigeonExamplePackageCode code,
    FlValue* data, int64_t* zzz);

const gchar* pigeon_example_package_message_data_get_name(
    PigeonExamplePackageMessageData* self);

const gchar* pigeon_example_package_message_data_get_description(
    PigeonExamplePackageMessageData* self);

PigeonExamplePackageCode pigeon_example_package_message_data_get_code(
    PigeonExamplePackageMessageData* self);

FlValue* pigeon_example_package_message_data_get_data(
    PigeonExamplePackageMessageData* self);

int64_t* pigeon_example_package_message_data_get_zzz(
    PigeonExamplePackageMessageData* self);

G_DECLARE_FINAL_TYPE(
    PigeonExamplePackageExampleHostApiGetHostLanguageResponse,
    pigeon_example_package_example_host_api_get_host_language_response,
    PIGEON_EXAMPLE_PACKAGE, EXAMPLE_HOST_API_GET_HOST_LANGUAGE_RESPONSE,
    GObject)

PigeonExamplePackageExampleHostApiGetHostLanguageResponse*
pigeon_example_package_example_host_api_get_host_language_response_new(
    const gchar* return_value);

PigeonExamplePackageExampleHostApiGetHostLanguageResponse*
pigeon_example_package_example_host_api_get_host_language_response_new_error(
    const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(PigeonExamplePackageExampleHostApiAddResponse,
                     pigeon_example_package_example_host_api_add_response,
                     PIGEON_EXAMPLE_PACKAGE, EXAMPLE_HOST_API_ADD_RESPONSE,
                     GObject)

PigeonExamplePackageExampleHostApiAddResponse*
pigeon_example_package_example_host_api_add_response_new(int64_t return_value);

PigeonExamplePackageExampleHostApiAddResponse*
pigeon_example_package_example_host_api_add_response_new_error(
    const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(PigeonExamplePackageExampleHostApi,
                     pigeon_example_package_example_host_api,
                     PIGEON_EXAMPLE_PACKAGE, EXAMPLE_HOST_API, GObject)

typedef struct {
  PigeonExamplePackageExampleHostApiGetHostLanguageResponse* (
      *get_host_language)(PigeonExamplePackageExampleHostApi* self,
                          gpointer user_data);
  PigeonExamplePackageExampleHostApiAddResponse* (*add)(
      PigeonExamplePackageExampleHostApi* self, int64_t a, int64_t b,
      gpointer user_data);
  void (*send_message)(PigeonExamplePackageExampleHostApi* self,
                       PigeonExamplePackageMessageData* message,
                       FlBasicMessageChannelResponseHandle* response_handle,
                       gpointer user_data);
} PigeonExamplePackageExampleHostApiVTable;

PigeonExamplePackageExampleHostApi* pigeon_example_package_example_host_api_new(
    FlBinaryMessenger* messenger,
    const PigeonExamplePackageExampleHostApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func);

void pigeon_example_package_example_host_api_respond_send_message(
    PigeonExamplePackageExampleHostApi* self,
    FlBasicMessageChannelResponseHandle* response_handle,
    gboolean return_value);

void pigeon_example_package_example_host_api_respond_error_send_message(
    PigeonExamplePackageExampleHostApi* self,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(PigeonExamplePackageMessageFlutterApi,
                     pigeon_example_package_message_flutter_api,
                     PIGEON_EXAMPLE_PACKAGE, MESSAGE_FLUTTER_API, GObject)

PigeonExamplePackageMessageFlutterApi*
pigeon_example_package_message_flutter_api_new(FlBinaryMessenger* messenger);

void pigeon_example_package_message_flutter_api_flutter_method(
    PigeonExamplePackageMessageFlutterApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data);

gboolean pigeon_example_package_message_flutter_api_flutter_method_finish(
    PigeonExamplePackageMessageFlutterApi* self, GAsyncResult* result,
    gchar** return_value, GError** error);

void pigeon_example_package_message_flutter_api_flutter_method_x(
    PigeonExamplePackageMessageFlutterApi* self, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data);

gboolean pigeon_example_package_message_flutter_api_flutter_method_x_finish(
    PigeonExamplePackageMessageFlutterApi* self, GAsyncResult* result,
    bool* return_value_set, int64_t* return_value, GError** error);

G_END_DECLS

#endif  // PIGEON_MESSAGES_G_H_
