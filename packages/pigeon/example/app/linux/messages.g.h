// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_

#include <flutter_linux/flutter_linux.h>

G_BEGIN_DECLS

typedef enum { MY_CODE_ONE = 0, MY_CODE_TWO = 1 } MyCode;

G_DECLARE_FINAL_TYPE(MyMessageData, my_message_data, MY, MESSAGE_DATA, GObject)

MyMessageData* my_message_data_new(MyCode code, FlValue* data);

MyMessageData* my_message_data_new_full(const gchar* name,
                                        const gchar* description, MyCode code,
                                        FlValue* data);

const gchar* my_message_data_get_name(MyMessageData* object);

const gchar* my_message_data_get_description(MyMessageData* object);

MyCode my_message_data_get_code(MyMessageData* object);

FlValue* my_message_data_get_data(MyMessageData* object);

G_DECLARE_FINAL_TYPE(MyExampleHostApi, my_example_host_api, MY,
                     EXAMPLE_HOST_API, GObject)

typedef struct {
  void (*get_host_language)(
      MyExampleHostApi* object,
      FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data);
  void (*add)(MyExampleHostApi* object,
              FlBasicMessageChannelResponseHandle* response_handle, int64_t a,
              int64_t b, gpointer user_data);
  void (*send_message)(MyExampleHostApi* object,
                       FlBasicMessageChannelResponseHandle* response_handle,
                       MyMessageData* message, gpointer user_data);
} MyExampleHostApiVTable;

MyExampleHostApi* my_example_host_api_new(FlBinaryMessenger* messenger,
                                          const MyExampleHostApiVTable* vtable,
                                          gpointer user_data,
                                          GDestroyNotify user_data_free_func);

gboolean my_example_host_api_respond_get_host_language(
    MyExampleHostApi* object,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* result,
    GError** error);

gboolean my_example_host_api_respond_error_get_host_language(
    MyExampleHostApi* object,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details, GError** error);

gboolean my_example_host_api_respond_add(
    MyExampleHostApi* object,
    FlBasicMessageChannelResponseHandle* response_handle, int64_t result,
    GError** error);

gboolean my_example_host_api_respond_error_add(
    MyExampleHostApi* object,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details, GError** error);

gboolean my_example_host_api_respond_send_message(
    MyExampleHostApi* object,
    FlBasicMessageChannelResponseHandle* response_handle, gboolean result,
    GError** error);

gboolean my_example_host_api_respond_error_send_message(
    MyExampleHostApi* object,
    FlBasicMessageChannelResponseHandle* response_handle, const gchar* code,
    const gchar* message, FlValue* details, GError** error);

G_DECLARE_FINAL_TYPE(MyMessageFlutterApi, my_message_flutter_api, MY,
                     MESSAGE_FLUTTER_API, GObject)

MyMessageFlutterApi* my_message_flutter_api_new(FlBinaryMessenger* messenger);

void my_message_flutter_api_flutter_method_async(MyMessageFlutterApi* object,
                                                 const gchar* a_string,
                                                 GCancellable* cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);

gboolean my_message_flutter_api_flutter_method_finish(
    MyMessageFlutterApi* object, GAsyncResult* result, gchar** value,
    GError** error);

G_END_DECLS

#endif  // PIGEON_MESSAGES_G_H_
